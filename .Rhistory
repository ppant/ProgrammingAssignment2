install.packages("swirl")
load(swirl)
library(swirl)
swirl()
swirl()
swirl()
swirl()
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install_from_swirl("https://github.com/swirldev/swirl_courses/tree/master/R_Programming")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
swirl()
identical(2,2.0)
library(datasets)
data("iris")
data(iris)
data("mtcars")
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl,
tapply(mtcars$cyl, mtcars$mpg, mean)
)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
result <- iris[iris$Species == "virginica", ]
lapply(result[1], mean)
matrix(c(1,2,3,4,5,6),nrow = 2, ncol = 3)
?matrix
mat<-matrix(c(1,2,3,4,5,6),nrow = 2, ncol = 3)
mat
solve(mat)
solve(mat)
mat<-matrix(c(1,2,3,4,5,6),nrow = 2, ncol = 3, byrow = TRUE)
mat
solve(mat)
library("MASS", lib.loc="C:/Program Files/R/R-3.2.3/library")
install.packages("MASS")
ginv
ls
ginv
?ginv()
library("MASS", lib.loc="~/R/win-library/3.2")
library("MASS", lib.loc="C:/Program Files/R/R-3.2.3/library")
detach("package:MASS", unload=TRUE)
library("MASS", lib.loc="C:/Program Files/R/R-3.2.3/library")
detach("package:MASS", unload=TRUE)
library("MASS", lib.loc="C:/Program Files/R/R-3.2.3/library")
library("MASS", lib.loc="~/R/win-library/3.2")
solve(mat)
solve(mat) * mat
mat<-rbind(c(1,2,3,4,5,6),nrow = 2, ncol = 3, byrow = TRUE)
mat
solve(mat)
mat<-rbind(c(1,2,3,4,5,6),nrow = 2, ncol = 3, byrow = TRUE)
ma
mat
mat<-matrix(c(1,2,3,4,5,6),nrow = 2, ncol = 3, byrow = TRUE)
mat
mat<-matrix(c(1,2,3,4,5,6),nrow = 2, ncol = 2, byrow = TRUE)
mat
solve(mat)
makeCacheMatrix <- function(x = matrix()) {
mat<-matrix(c(1,2,3,4),nrow = 2, ncol = 2, byrow = TRUE)
invmat<-solve(mat)
invmat
}
makeCacheMatrix <- function(x = matrix()) {
mat<-matrix(c(1,2,3,4),nrow = 2, ncol = 2, byrow = TRUE)
invmat<-solve(mat)
print (invmat)
}
makeCacheMatrix()
getwd()
setwd(F:\data from desktop\MyDocuments\Learning\GitHubProj\datasciencecoursera\ProgrammingAssignment2)
setwd("F:\data from desktop\MyDocuments\Learning\GitHubProj\datasciencecoursera\ProgrammingAssignment2")
setwd("F:/data from desktop/MyDocuments/Learning/GitHubProj/datasciencecoursera/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
?"matrix"
makeCacheMatrix <- function(x = matrix()) {
mat<-matrix(c(1,2,3,4),nrow = 2, ncol = 2, byrow = TRUE)
invmat<-solve(mat)
print (invmat)
}
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
inverse()
inverse()
source("cachematrix.R")
inverse()
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
cacheSolve()
cacheSolve()
makeCacheMatrix()
source("cachematrix.R")
cacheSolve()
cacheSolve()
source("cachematrix.R")
cacheSolve()
source("cachematrix.R")
cacheSolve()
source("cachematrix.R")
cacheSolve()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
test(1,2,3,4)
test("1,2,3,4")
test(c(1,2,3,4))
test(c(1,2,3,4))
test()
test()
source("cachematrix.R")
test()
source("cachematrix.R")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
source("cachematrix.R")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
source("cachematrix.R")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
source("cachematrix.R")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(10000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
testInverseCache(mat1)
source("cachematrix.R")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
testInverseCache(mat1)
